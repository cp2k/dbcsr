#!-------------------------------------------------------------------------------------------------!
#! Copyright (C) by the DBCSR developers group - All rights reserved                               !
#! This file is part of the DBCSR library.                                                         !
#!                                                                                                 !
#! For information on the license, see the LICENSE file.                                           !
#! For further information please visit https://dbcsr.cp2k.org                                     !
#! SPDX-License-Identifier: GPL-2.0+                                                               !
#!-------------------------------------------------------------------------------------------------!

#:mute

#:set keytype = ['str', 'i4tuple']
#:set valuetype = ['i4', 'callstat']

#:set keyvalue_list = list(zip(keytype, valuetype))

#:set keytype_fort = ['CHARACTER(LEN=default_string_length)', 'INTEGER(kind=int_4), dimension(2)']
#:set valuetype_fort = ['INTEGER(kind=int_4)', 'TYPE(call_stat_type), POINTER']
#:set key_assign = ['=', '=']
#:set value_assign = ['=', '=>']

#:def isequal_str(k1, k2)
${k1}$ == ${k2}$
#:enddef

#:def isequal_i4tuple(k1, k2)
ALL(${k1}$==${k2}$)
#:enddef

#:set isequal = [isequal_str, isequal_i4tuple]

#:def hash_str()
FUNCTION hash_str(key) RESULT(hash)
   !! This is joaat_hash from string_table.F, generates the hash of a given string
   !! @note
   !!       http://en.wikipedia.org/wiki/Hash_table
   !!       http://www.burtleburtle.net/bob/hash/doobs.html

    CHARACTER(LEN=*), INTENT(IN)             :: key
       !! key a string of any length
    INTEGER(KIND=int_8)                      :: hash
    INTEGER(KIND=int_8), PARAMETER           :: b32 = 2_int_8**32-1_int_8
    INTEGER                                  :: i

    hash=0_int_8
    DO i=1,LEN(key)
       hash=IAND(hash+ICHAR(key(i:i))                ,b32)
       hash=IAND(     hash+IAND(ISHFT(hash,10),b32)  ,b32)
       hash=IAND(IEOR(hash,IAND(ISHFT(hash,-6),b32)) ,b32)
    ENDDO
    hash=IAND(     hash+IAND(ISHFT(hash,  3),b32)  ,b32)
    hash=IAND(IEOR(hash,IAND(ISHFT(hash,-11),b32)) ,b32)
    hash=IAND(     hash+IAND(ISHFT(hash, 15),b32)  ,b32)
END FUNCTION hash_str
#:enddef

#:def hash_i4tuple()
FUNCTION hash_i4tuple(key) RESULT(hash)
   INTEGER(kind=int_4), dimension(2), INTENT(IN) :: key
   INTEGER(kind=int_4)                           :: hash
   hash = SUM(key)
END FUNCTION hash_i4tuple
#:enddef

#:set hash_fct = [hash_str(), hash_i4tuple()]

#:set usekinds = ['default_string_length', 'int_8', 'int_4']
#:set usetimings = ['call_stat_type']


#:set inst_params = list(zip(keytype, valuetype, keytype_fort, valuetype_fort, key_assign, value_assign, isequal))

#:def uselist(list_in)
#!    comma-separated list of unique entries of list_in
$:    ", ".join(list(set(list_in)))
#:enddef

#:endmute
