---
name: Testing on Linux
on:
  push:
    branches:
    - 'develop'
  pull_request:

jobs:
  ##################################################################################
  # Run pre-commit
  ##################################################################################
  pre-commit:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cp2k/dbcsr-build-env-ubuntu-20.04:develop
    steps:
    - uses: actions/checkout@v2
    - name: Run pre-commit
      run: |
        git config --global --add safe.directory "$GITHUB_WORKSPACE"
        pre-commit run --all-files || ( git status --short ; git diff ; exit 1 )

  ##################################################################################
  # Build and test on linux, no accelerator
  ##################################################################################
  build-and-test:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cp2k/dbcsr-build-env-ubuntu-20.04:develop

    strategy:
      matrix:
        use_mpi: [MPI=ON, MPI=OFF]
        use_openmp: [OPENMP=ON, OPENMP=OFF]
        use_smm: [SMM=blas, SMM=libxsmm]
        mpi_suffix: [openmpi, mpich]
        exclude:
          - use_mpi: MPI=OFF
            mpi_suffix: mpich

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true

    - name: Configure
      run: |
        mkdir -p build
        cd build
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Coverage \
          -DUSE_${{ matrix.use_mpi }} \
          -DUSE_${{ matrix.use_openmp }} \
          -DUSE_${{ matrix.use_smm }} \
          -DMPI_EXECUTABLE_SUFFIX=.${{ matrix.mpi_suffix }} \
          -DMPIEXEC_PREFLAGS="$([ "${{ matrix.mpi_suffix }}" = "openmpi" ] && echo "-mca btl ^openib --allow-run-as-root")" \
          ..

    - name: Build
      run: cmake --build build -- --verbose

    - name: Test
      run: |
        cd build
        ctest --output-on-failure

    - name: Generate coverage info
      run: |
        cmake --build build -- cov-info

    - name: Upload coverage info to codecov
      if: github.repository == 'cp2k/dbcsr'
      uses: codecov/codecov-action@v1
      with:
        file: build/coverage.info
        flags: unittests,${{ matrix.use_mpi == 'MPI=ON' && 'with-mpi' || 'without-mpi' }},${{ matrix.use_openmp == 'OPENMP=ON' && 'with-openmp' || 'without-openmp' }},${{ matrix.use_smm == 'SMM=blas' && 'with-blas' || 'with-libxsmm' }}
        name: dbcsr-unittests-${{ matrix.use_mpi }}-${{ matrix.use_openmp }}-${{ matrix.use_smm }}-cpu-only
        fail_ci_if_error: true

  ##################################################################################
  # Build on CUDA
  ##################################################################################
  build-on-cuda:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cp2k/dbcsr-build-env-ubuntu-20.04-cuda:develop

    strategy:
      matrix:
        use_openmp: [OPENMP=ON]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true

    - name: Configure
      run: |
        mkdir -p build
        cd build
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DUSE_${{ matrix.use_openmp }} \
          -DUSE_ACCEL=cuda \
          -DWITH_GPU=V100 \
          -DWITH_EXAMPLES=ON \
          ..
    - name: Build
      run: cmake --build build -- --verbose

  ##################################################################################
  # Build on OpenCL
  ##################################################################################
  build-on-opencl:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cp2k/dbcsr-build-env-ubuntu-20.04-cuda:develop

    strategy:
      matrix:
        use_openmp: [OPENMP=ON]
        use_smm: [SMM=libxsmm]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true

    - name: Configure
      run: |
        mkdir -p build
        cd build
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DUSE_${{ matrix.use_openmp }} \
          -DUSE_${{ matrix.use_smm }} \
          -DUSE_ACCEL=opencl \
          -DWITH_EXAMPLES=ON \
          ..
    - name: Build
      run: cmake --build build -- --verbose

  ##################################################################################
  # Build on ROCm
  ##################################################################################
  build-on-rocm:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cp2k/dbcsr-build-env-rocm:develop

    strategy:
      matrix:
        use_openmp: [OPENMP=ON]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true

    - name: Configure
      run: |
        mkdir -p build
        cd build
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DUSE_${{ matrix.use_openmp }} \
          -DUSE_ACCEL=hip \
          -DWITH_GPU=Mi100 \
          -DWITH_EXAMPLES=ON \
          -DCMAKE_PREFIX_PATH=/opt/rocm \
          ..
    - name: Build
      run: cmake --build build -- --verbose

#  vim: set ts=2 sw=2 tw=0 :
